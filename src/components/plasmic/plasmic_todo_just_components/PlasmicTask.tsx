// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gmhn2s7Us59QFKoeg8h2qp
// Component: utiZihbX8-rnc
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_todo_just_components.module.css"; // plasmic-import: gmhn2s7Us59QFKoeg8h2qp/projectcss
import sty from "./PlasmicTask.module.css"; // plasmic-import: utiZihbX8-rnc/css

import imageNOmbeu8ZCt3J from "./images/image.png"; // plasmic-import: nOMBEU8ZCt3j_/picture

export type PlasmicTask__VariantMembers = {
  states: "completed" | "editing" | "highPriority";
};

export type PlasmicTask__VariantsArgs = {
  states?: SingleChoiceArg<"completed" | "editing" | "highPriority">;
};

type VariantPropType = keyof PlasmicTask__VariantsArgs;
export const PlasmicTask__VariantProps = new Array<VariantPropType>("states");

export type PlasmicTask__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTask__ArgsType;
export const PlasmicTask__ArgProps = new Array<ArgPropType>("children");

export type PlasmicTask__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultTaskProps {
  children?: React.ReactNode;
  states?: SingleChoiceArg<"completed" | "editing" | "highPriority">;
  className?: string;
}

function PlasmicTask__RenderFunc(props: {
  variants: PlasmicTask__VariantsArgs;
  args: PlasmicTask__ArgsType;
  overrides: PlasmicTask__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__dMeFz, {
          [sty.freeBoxstates_completed__dMeFzYfMge]: hasVariant(
            variants,
            "states",
            "completed"
          ),
          [sty.freeBoxstates_highPriority__dMeFz98Wk1]: hasVariant(
            variants,
            "states",
            "highPriority"
          )
        })}
      >
        {(hasVariant(variants, "states", "completed") ? true : false) ? (
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgstates_completed]: hasVariant(
                variants,
                "states",
                "completed"
              )
            })}
            displayHeight={"16px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: imageNOmbeu8ZCt3J,
              fullWidth: 129,
              fullHeight: 105,
              aspectRatio: undefined
            }}
          />
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__vUeNz)}>
        {p.renderPlasmicSlot({
          defaultContents: "Buy some milk",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenstates_completed]: hasVariant(
              variants,
              "states",
              "completed"
            )
          })
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTask__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTask__VariantsArgs;
    args?: PlasmicTask__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTask__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTask__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTask__ArgProps,
      internalVariantPropNames: PlasmicTask__VariantProps
    });

    return PlasmicTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTask";
  } else {
    func.displayName = `PlasmicTask.${nodeName}`;
  }
  return func;
}

export const PlasmicTask = Object.assign(
  // Top-level PlasmicTask renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicTask
    internalVariantProps: PlasmicTask__VariantProps,
    internalArgProps: PlasmicTask__ArgProps
  }
);

export default PlasmicTask;
/* prettier-ignore-end */
